#!/usr/bin/env python3

from dataclasses import dataclass
from importlib.metadata import files
import json
import logging
import os
import subprocess
import time

import config

POLL_INTERVAL = 0.5
S6_RC_ACTIVATION_DIR = '/etc/s6-overlay/s6-rc.d/user/contents.d'

NGINX_EGRESSES_CONF = '/etc/nginx/egresses.conf'

MOUNTEBANK_ALL_CONFIG = '/etc/mountebank/all.config.json'


def activationfile(service):
    return os.path.join(S6_RC_ACTIVATION_DIR, service)


def updateActivations(oldActivations, newActivations):
    # We haven't figured out how to tell existing services to reload their
    # configs, so for now we just bounce everything.
    # if oldActivations != newActivations:
    for activation in oldActivations:
        logging.info(f'Deactivating service {activation.service}')
        os.system(f's6-rc -d change {activation.service}')

    for activation in newActivations:
        logging.info(f'Activating service {activation.service}')
        os.system(f's6-rc -u change {activation.service}')

    return newActivations


@dataclass
class Stat:
    mtime: int
    content: str


def changes(watches):
    logging.info(f'Watching: {".".join(map(repr, watches))}')
    stats = {
        watch.path: Stat(mtime=None, content=None)
        for watch in watches
    }
    oldWatches = watches
    while True:
        if oldWatches != watches:
            logging.info(f'Now watching: {".".join(map(repr, watches))}')
            oldWatches = watches

        for watch in watches:
            s = stats[watch.path]
            newmtime = os.stat(watch.path).st_mtime
            if s.mtime != newmtime:
                s.mtime = newmtime
                with open(watch.path) as cf:
                    newcontent = cf.read()
                if s.content != newcontent:
                    if s.content is not None:
                        watches = yield [watch]
                    s.content = newcontent
            else:
                time.sleep(POLL_INTERVAL)


def updateMountebankConfig(mountebanks, egresses):
    imposters = []
    nextPort = config.portAllocator(11000)

    for mb in mountebanks:
        port = nextPort()

        egresses.add(service=mb.service, target=f'http://localhost:{port}')

        match mb.WhichOneof('config'):
            case 'path':
                cfg = config.load(mb.cfgpath)
            case 'json':
                cfg = json.loads(mb.json)

        cfg['port'] = port

        imposters.append(cfg)

    cfg = {
        "imposters": imposters,
    }

    with open(MOUNTEBANK_ALL_CONFIG, 'w') as f:
        json.dump(cfg, f, indent=2)


def reconfigure(changedFiles, oldActivations):
    try:
        p = subprocess.run(
            f'/envelope/bin/reconfigure {" ".join(changedFiles)}',
            shell=True,
            capture_output=True,
        )
        p.check_returncode()
    except Exception as e:
        logging.error(e)
        logging.error(f"\033[1;31m{str(p.stderr, 'utf-8')}\033[0m")
        logging.error(f"\033[1;32m{str(p.stdout, 'utf-8')}\033[0m")
        raise
    if p.stderr:
        logging.info(str(p.stderr, 'utf-8'))

    cmds = config.parseCommands(p.stdout)

    if cmds.mountebanks:
        cmds.activations.add(service='mountebank')
        updateMountebankConfig(cmds.mountebanks, cmds.egresses)
        for mb in cmds.mountebanks:
            if mb.WhichOneof('config') == 'path':
                cmds.watches.append(mb.path)

    for egress in cmds.egresses:
        cmds.proxies.add(
            urlpath=f'/egresses/{egress.service}',
            target=egress.target,
        )

    if cmds.proxies:
        print(f'Generate {NGINX_EGRESSES_CONF}')
        with open(NGINX_EGRESSES_CONF, 'w') as w:
            for p in sorted(cmds.proxies, key=lambda p: p.urlpath):
                print(f"""
                    location {p.urlpath} {{
                        rewrite ^{p.urlpath}/(.*)$ /$1 break;
                        proxy_pass {p.target};
                    }}
                """, file=w)

    print(cmds)

    logging.info('Reload nginx config')
    subprocess.run('nginx -t -c /etc/nginx/nginx.conf', shell=True, check=True)
    subprocess.run('nginx -s reload', shell=True, check=True)

    logging.info('Update activations')
    newActivations = updateActivations(
        oldActivations, cmds.activations)

    return cmds.watches, newActivations


def main():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s.%(msecs)03d %(levelname)s %(name)s %(message)s',
        datefmt='%Y-%m-%dT%H:%M:%S',
    )

    watches, activations = reconfigure([], set())
    try:
        changeStream = changes(watches)
        changedFiles = next(changeStream)
        while True:
            watches, activations = reconfigure(changedFiles, activations)
            changedFiles = changeStream.send(watches)
    finally:
        updateActivations(activations, [])


if __name__ == '__main__':
    main()
