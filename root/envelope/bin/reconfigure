#!/usr/bin/env python3

from dataclasses import dataclass
import json
import re
import os

import config

# Input
CONFIG_FILE = '/work/config.{}'

# Outputs
WIRING_FILE = '/work/wiring.env'


LOCALHOST_RE = re.compile(r'(?<=://)localhost\b')


def computeEgresses(cmds, cfg, basedir):
    for (service, egress) in sorted(cfg['egresses'].items()):
        match egress:
            case list():
                if len(egress) != 1:
                    raise NotImplementedError("len(egress) != 1 not supported")
                [egress] = egress
            case str():
                egress = LOCALHOST_RE.sub('host.docker.internal', egress)
                cmds.proxy(f'/egresses/{service}', egress)
            case {'mountebank': mb}:
                cmds.mountebank(service, mb, basedir)


def generateWiringFile(cfg):
    with open(WIRING_FILE, 'w') as w:
        json.dump({
            'ingress': f"127.0.0.1:10000",
            'egresses': {
                key: f"http://localhost:{cfg['envelope']}/egresses/{key}"
                for key in cfg['egresses']
            }
        }, w, indent=2)


def main():
    with config.Commands() as cmds:
        (cfg, path) = config.loadAny(CONFIG_FILE)

        computeEgresses(cmds, cfg, config.basedir(path))
        generateWiringFile(cfg)

        cmds.watch(path)


if __name__ == '__main__':
    main()
