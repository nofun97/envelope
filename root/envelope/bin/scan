#!/usr/bin/env python3

from dataclasses import dataclass
from importlib.metadata import files
import json
import jsonschema
import logging
import os
import subprocess
import time
import traceback

import config

POLL_INTERVAL = 0.5
S6_RC_ACTIVATION_DIR = '/etc/s6-overlay/s6-rc.d/user/contents.d'

NGINX_SERVERS_CONF = '/etc/nginx/servers.conf'

MOUNTEBANK_ALL_CONFIG = '/etc/mountebank/all.config.json'


def activationfile(service):
    return os.path.join(S6_RC_ACTIVATION_DIR, service)


def updateActivations(oldActivations, newActivations):
    # We haven't figured out how to tell existing services to reload their
    # configs, so for now we just bounce everything.
    # if oldActivations != newActivations:
    for activation in oldActivations:
        logging.info(f'Deactivating service {activation.service}')
        os.system(f's6-rc -d change {activation.service}')

    for activation in newActivations:
        logging.info(f'Activating service {activation.service}')
        os.system(f's6-rc -u change {activation.service}')

    return newActivations


@dataclass
class Stat:
    mtime: int
    content: str


def changes(watches):
    stats = {
        watch.path: Stat(mtime=None, content=None)
        for watch in watches
    }
    oldWatches = watches
    while True:
        if oldWatches != watches:
            oldWatches = watches

        for watch in watches:
            s = stats[watch.path]
            newmtime = os.stat(watch.path).st_mtime
            if s.mtime != newmtime:
                s.mtime = newmtime
                with open(watch.path) as cf:
                    newcontent = cf.read()
                if s.content != newcontent:
                    if s.content is not None:
                        watches = yield [watch]
                    s.content = newcontent
            else:
                time.sleep(POLL_INTERVAL)


_validator = None


def pathToFile(basedir):
    def transform(obj, put):
        match obj:
            case {'path': path}:
                path = config.abspath(basedir, path)
                yield path
                with open(path) as f:
                    put(f.read())
    return transform


def tweakImposter(cmds, imposter, basedir):
    for path in mountebank.walkFileRefs(imposter, pathToFile(basedir)):
        cmds.watches.add(path=path)

    _validator.validate({'imposters': [imposter]})


def updateMountebankConfig(cmds, mountebanks, egresses):
    imposters = []
    nextPort = config.portAllocator(11000)

    for mb in mountebanks:
        port = nextPort()

        match mb.WhichOneof('config'):
            case 'path':
                imposter = config.load(mb.path)
                imposterpath = mb.path
            case 'json':
                imposter = json.loads(mb.json)
                imposterpath = mb.basedir

        imposter['port'] = port
        protocol = envelope_pb2.GRPC if imposter['protocol'] == 'grpc' else 0
        scheme = "grpc" if protocol == envelope_pb2.GRPC else "http"

        egresses.add(
            service=mb.service,
            target=f'{scheme}://localhost:{port}',
            protocol=protocol,
            port=mb.port,
        )

        tweakImposter(cmds, imposter, config.basedir(imposterpath))

        imposters.append(imposter)

    imposter = {
        "imposters": imposters,
    }

    with open(MOUNTEBANK_ALL_CONFIG, 'w') as f:
        json.dump(imposter, f, indent=2)


def reconfigure(changedFiles, oldActivations):
    try:
        p = None
        try:
            p = subprocess.run(
                f'/envelope/bin/reconfigure {" ".join(f.path for f in changedFiles)}',
                shell=True,
                capture_output=True,
            )
            p.check_returncode()
        except Exception as e:
            logging.error(e)
            if p is not None:
                logging.error(f"\033[1;31m{str(p.stderr, 'utf-8')}\033[0m")
                logging.error(f"\033[1;32m{str(p.stdout, 'utf-8')}\033[0m")
            raise
        if p.stderr:
            logging.info(str(p.stderr, 'utf-8'))

        cmds = config.parseCommands(p.stdout)

        if cmds.mountebanks:
            cmds.activations.add(service='mountebank')
            updateMountebankConfig(cmds, cmds.mountebanks, cmds.egresses)
            for mb in cmds.mountebanks:
                if mb.WhichOneof('config') == 'path':
                    cmds.watches.add(path=mb.path)

        for egress in cmds.egresses:
            cmds.proxies.add(
                urlpath=f'/egresses/{egress.service}',
                target=egress.target,
                port=egress.port,
                protocol=egress.protocol,
            )

        if cmds.proxies:
            print(f'Generate {NGINX_SERVERS_CONF}')
            with open(NGINX_SERVERS_CONF, 'w') as w:
                for p in sorted(cmds.proxies, key=lambda p: p.urlpath):
                    grpc = config.getScheme(p.target) == 'grpc'

                    print(f"""
                        servers {{
                            listen {p.port} {'http2' if grpc else ''};

                            location / {{
                                {'grpc' if grpc else 'proxy'}_pass {p.target};
                            }}
                        }}
                    """, file=w)

        print(cmds)

        logging.info('Reload nginx config')
        subprocess.run('nginx -t -c /etc/nginx/nginx.conf',
                       shell=True, check=True)
        subprocess.run('nginx -s reload', shell=True, check=True)

        logging.info('Update activations')
        newActivations = updateActivations(oldActivations, cmds.activations)

        return cmds.watches, newActivations
    except Exception as ex:
        traceback.print_exception(type(ex), ex, ex.__traceback__)
        return (changedFiles, oldActivations)


def main():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s.%(msecs)03d %(levelname)s %(name)s %(message)s',
        datefmt='%Y-%m-%dT%H:%M:%S',
    )

    try:
        global _validator
        (schema, _) = config.loadAny('/envelope/lib/mountebank.schema.{}')
        _validator = jsonschema.Draft202012Validator(schema)
    except Exception as ex:
        traceback.print_exception(type(ex), ex, ex.__traceback__)
        while True:
            time.sleep(86400)

    watches, activations = reconfigure([], set())
    try:
        changeStream = changes(watches)
        changedFiles = next(changeStream)
        while True:
            watches, activations = reconfigure(changedFiles, activations)
            changedFiles = changeStream.send(watches)
    finally:
        updateActivations(activations, [])


if __name__ == '__main__':
    main()
