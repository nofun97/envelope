#!/usr/bin/env python3

from dataclasses import dataclass
import json
import re
import sys

import config

# Input
CONFIG_FILE = '/work/config.{}'

# Outputs
WIRING_FILE = '/work/wiring.env'

LOCALHOST_RE = re.compile(r'://localhost\b')

def report(*args):
    print(*args, file=sys.stderr)

def generateWiringFile(cfg):
    report('Generate', WIRING_FILE)
    with open(WIRING_FILE, 'w') as w:
        json.dump({
            'ingress': f"127.0.0.1:10000",
            'egresses': {
                key: f"http://localhost:{cfg['envelope']}/egresses/{key}"
                for key in cfg['egresses']
            }
        }, w, indent=2)

def generateEgressesFile(cfg):
    for (service, egress) in sorted(cfg['egresses'].items()):
        if isinstance(egress, list):
            if len(egress) != 1:
                raise NotImplementedError("len(egress) != 1 not supported")
            [egress] = egress

        if isinstance(egress, str):
            egress = egress.replace('://localhost', '://host.docker.internal')
            config.cmd.proxy(f'/egresses/{service}', egress)
        elif isinstance(egress, dict):
            if 'mountebank' in egress:
                config.cmd.mountebank(service, egress['mountebank'])

def main():
    (cfg, cfgpath) = config.loadAny(CONFIG_FILE)

    generateEgressesFile(cfg)
    generateWiringFile(cfg)

    config.cmd.watch(cfgpath)

if __name__ == '__main__':
    main()
