#!/usr/bin/env python3

import collections
from dataclasses import dataclass
from importlib.metadata import files
import json
import logging
import os
import subprocess
import time

import config

POLL_INTERVAL = 0.5
S6_RC_ACTIVATION_DIR = '/etc/s6-overlay/s6-rc.d/user/contents.d'

NGINX_EGRESSES_CONF = '/etc/nginx/egresses.conf'

MOUNTEBANK_ALL_CONFIG = '/etc/mountebank/all.config.json'

def activationfile(service):
    return os.path.join(S6_RC_ACTIVATION_DIR, service)

def updateActivations(oldActivations, newActivations):
    # We haven't figured out how to tell existing services to reload their
    # configs, so for now we just bounce everything.
    # if oldActivations != newActivations:
    for service in oldActivations:
        logging.info(f'Deactivating service {service}')
        os.system(f's6-rc -d change {service}')

    for service in newActivations:
        logging.info(f'Activating service {service}')
        os.system(f's6-rc -u change {service}')

    return newActivations

@dataclass
class Stat:
    mtime: int
    content: str

def changes(filenames):
    logging.info(f'Watching: {".".join(map(repr, filenames))}')
    stats = {
        filename: Stat(mtime=None, content=None)
        for filename in filenames
    }
    oldfilenames = filenames
    while True:
        if oldfilenames != filenames:
            logging.info(f'Now watching: {".".join(map(repr, filenames))}')
            oldfilenames = filenames

        for filename in filenames:
            s = stats[filename]
            newmtime = os.stat(filename).st_mtime
            if s.mtime != newmtime:
                s.mtime = newmtime
                with open(filename) as cf:
                    newcontent = cf.read()
                if s.content != newcontent:
                    if s.content is not None:
                        filenames = yield {filename}
                    s.content = newcontent
            else:
                time.sleep(POLL_INTERVAL)

def updateMountebankConfig(mountebank, egresses):
    imposters = []
    port = 11000

    for mb in mountebank:
        egresses.add(Egress(
            service=mb.service,
            target=f'http://localhost:{port}',
        ))

        cfg = config.load(mb.cfgpath)
        cfg['port'] = port
        port += 1

        imposters.append(cfg)

    cfg = {
        "imposters": imposters,
    }

    with open(MOUNTEBANK_ALL_CONFIG, 'w') as f:
        json.dump(cfg, f, indent=2)

Egress = collections.namedtuple('Egress', 'service target')
Proxy = collections.namedtuple('Proxy', 'urlpath target')
Mountebank = collections.namedtuple('Mountebank', 'service cfgpath watch')

def reconfigure(changedFiles, oldActivations):
    try:
        p = subprocess.run(
            f'/envelope/bin/reconfigure {" ".join(changedFiles)}',
            shell=True,
            capture_output=True,
        )
        p.check_returncode()
    except Exception as e:
        logging.error(e)
        logging.error(f"\033[1;31m{str(p.stderr, 'utf-8')}\033[0m")
        logging.error(f"\033[1;32m{str(p.stdout, 'utf-8')}\033[0m")
        raise
    if p.stderr:
        logging.info(f"\033[1;31m{str(p.stderr, 'utf-8')}\033[0m")

    watches = set()
    newActivations = set()
    egresses = set()
    proxy = set()
    mountebank = set()
    for cmd in str(p.stdout, 'utf-8').split('\n'):
        logging.info(f'reconfigure: {cmd}')
        if not cmd:
            continue

        (op, arg) = config.parseCmd(cmd)
        if op == 'WATCH':
            watches.add(arg)
        elif op == 'ACTIVATE':
            newActivations.add(arg)
        elif op == 'EGRESS':
            egresses.add(Egress(**arg))
        elif op == 'PROXY':
            proxy.add(Proxy(**arg))
        elif op == 'MOUNTEBANK':
            mountebank.add(Mountebank(**arg))
        else:
            raise Exception(
                'reconfigure output lines must start with "WATCH "'
                f' (actual output: {cmd!r}'
            )

    if mountebank:
        newActivations.add('mountebank')
        updateMountebankConfig(mountebank, egresses)
        for mb in mountebank:
            if mb.watch:
                watches.add(mb.cfgpath)

    for egress in egresses:
        proxy.add(Proxy(
            urlpath=f'/egresses/{egress.service}',
            target=egress.target,
        ))

    if proxy:
        print(f'Generate {NGINX_EGRESSES_CONF}')
        with open(NGINX_EGRESSES_CONF, 'w') as w:
            for p in sorted(proxy, key=lambda p: p.urlpath):
                print(f"""
                    location {p.urlpath} {{
                        rewrite ^{p.urlpath}/(.*)$ /$1 break;
                        proxy_pass {p.target};
                    }}
                """, file=w)

    logging.info('Reload nginx config')
    subprocess.run('nginx -t -c /etc/nginx/nginx.conf', shell=True, check=True)
    subprocess.run('nginx -s reload', shell=True, check=True)

    logging.info('Update activations')
    newActivations = updateActivations(oldActivations, newActivations)

    return watches, newActivations

def main():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s.%(msecs)03d %(levelname)s %(name)s %(message)s',
        datefmt='%Y-%m-%dT%H:%M:%S',
    )

    files, activations = reconfigure([], set())
    try:
        changeStream = changes(files)
        changedFiles = next(changeStream)
        while True:
            files, activations = reconfigure(changedFiles, activations)
            changedFiles = changeStream.send(files)
    finally:
        updateActivations(activations, [])

if __name__ == '__main__':
    main()
