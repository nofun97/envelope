#!/usr/bin/env python3

from dataclasses import dataclass
import os
import subprocess
import time

POLL_INTERVAL = 0.5

@dataclass
class Stat:
    mtime: int
    content: str

def changes(*filenames):
    print(f'Watching: {".".join(map(repr, filenames))}')
    stats = {
        filename: Stat(mtime=None, content=None)
        for filename in filenames
    }
    oldfilenames = filenames
    while True:
        if oldfilenames != filenames:
            print(f'Now watching: {".".join(map(repr, filenames))}')
            oldfilenames = filenames

        for filename in filenames:
            s = stats[filename]
            newmtime = os.stat(filename).st_mtime
            if s.mtime != newmtime:
                s.mtime = newmtime
                with open(filename) as cf:
                    newcontent = cf.read()
                if s.content != newcontent:
                    if s.content is not None:
                        filenames = yield [filename]
                    s.content = newcontent
            else:
                time.sleep(POLL_INTERVAL)

def reconfigure(changedFiles):
    p = subprocess.run(
        f'/envelope/bin/reconfigure {" ".join(f for (f, _) in changedFiles)}',
        shell=True,
        check=True,
        capture_output=True,
    )

    files = []
    for cmd in str(p.stdout, 'utf-8').split('\n'):
        if not cmd:
            continue
        if cmd.startswith('WATCH '):
            files.append(cmd.split(maxsplit=1)[-1])
        else:
            raise Exception(
                'reconfigure output lines must start with "WATCH "'
                f' (actual output: {cmd!r}'
            )

    print('Reload nginx config')
    subprocess.run('nginx -t -c /var/lib/nginx/nginx.conf', shell=True, check=True)
    subprocess.run('nginx -s reload', shell=True, check=True)

    print('Reconfigured')

    return files

def main():
    files = reconfigure([])

    changeStream = changes(*files)
    changedFiles = next(changeStream)
    while True:
        # try:
        files = reconfigure(changedFiles)
        # except Exception as e:
        # print(f"Error in reconfigure: {e}")

        changedFiles = changeStream.send(files)

if __name__ == '__main__':
    main()
