#!/usr/bin/env python3

from dataclasses import dataclass
import json
import os
import subprocess
import time

CONFIG_FILE = '/work/config.jsonnet'

WIRING_FILE = '/work/wiring.env'
EGRESSES_FILE = '/var/lib/nginx/egresses.conf'

POLL_INTERVAL = 0.5

@dataclass
class Stat:
    mtime: int
    content: str

def changes(*filenames):
    print(f'watching: {".".join(map(repr, filenames))}')
    stats = {
        filename: Stat(mtime=None, content=None)
        for filename in filenames
    }
    while True:
        for filename in filenames:
            s = stats[filename]
            newmtime = os.stat(filename).st_mtime
            if s.mtime != newmtime:
                written = s.mtime is not None
                s.mtime = newmtime
                with open(filename) as cf:
                    newcontent = cf.read()
                if s.content != newcontent:
                    changed = s.content is not None
                    s.content = newcontent
                    if changed:
                        print(f'{filename} changed')
                    yield (filename, changed)
            else:
                time.sleep(POLL_INTERVAL)

def generateWiringFile(config):
    print('Generate', WIRING_FILE)
    with open(WIRING_FILE, 'w') as w:
        json.dump({
            'ingress': f"127.0.0.1:10000",
            'egresses': {
                key: f"http://localhost:{config['envelope']}/egresses/{key}"
                for key in config['egresses']
            }
        }, w, indent=2)
        print(file=w)

def generateEgressesFile(config):
    print('Generate', EGRESSES_FILE)
    with open(EGRESSES_FILE, 'w') as w:
        for (name, egress) in sorted(config['egresses'].items()):
            print(f"""
                location /egresses/{name} {{
                    rewrite ^/egresses/{name}/(.*)$ /$1 break;
                    proxy_pass {egress.replace('localhost', 'host.docker.internal')};
                }}
            """, file=w)

def main():
    for _ in changes(CONFIG_FILE):
        p = subprocess.run(
            'jsonnet /work/config.jsonnet',
            shell=True,
            check=True,
            capture_output=True,
        )
        p.check_returncode()

        config = json.loads(p.stdout)

        generateWiringFile(config)
        generateEgressesFile(config)

        print('Reload nginx config')
        subprocess.run('nginx -s reload', shell=True)

if __name__ == '__main__':
    main()
