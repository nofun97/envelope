#!/usr/bin/env python3

from dataclasses import dataclass
from importlib.metadata import files
import logging
import os
import subprocess
import time

POLL_INTERVAL = 0.5
S6_RC_ACTIVATION_DIR = '/etc/s6-overlay/s6-rc.d/user/contents.d'

def activationfile(service):
    return os.path.join(S6_RC_ACTIVATION_DIR, service)

def updateActivations(oldActivations, newActivations):
    for service in newActivations - oldActivations:
        logging.info(f'Activating service {service}')
        with open(activationfile(service), 'w'): pass

    for service in oldActivations - newActivations:
        logging.info(f'Deactivating service {service}')
        os.unlink(activationfile(service))

    return newActivations

@dataclass
class Stat:
    mtime: int
    content: str

def changes(filenames):
    logging.info(f'Watching: {".".join(map(repr, filenames))}')
    stats = {
        filename: Stat(mtime=None, content=None)
        for filename in filenames
    }
    oldfilenames = filenames
    while True:
        if oldfilenames != filenames:
            logging.info(f'Now watching: {".".join(map(repr, filenames))}')
            oldfilenames = filenames

        for filename in filenames:
            s = stats[filename]
            newmtime = os.stat(filename).st_mtime
            if s.mtime != newmtime:
                s.mtime = newmtime
                with open(filename) as cf:
                    newcontent = cf.read()
                if s.content != newcontent:
                    if s.content is not None:
                        filenames = yield {filename}
                    s.content = newcontent
            else:
                time.sleep(POLL_INTERVAL)

def reconfigure(changedFiles):
    try:
        p = subprocess.run(
            f'/envelope/bin/reconfigure {" ".join(changedFiles)}',
            shell=True,
            capture_output=True,
        )
        p.check_returncode()
    except Exception as e:
        logging.error(e)
        logging.error(f"\033[1;31m{str(p.stderr, 'utf-8')}\033[0m")
        logging.error(f"\033[1;32m{str(p.stdout, 'utf-8')}\033[0m")
        raise

    files = set()
    activations = set()
    for cmd in str(p.stdout, 'utf-8').split('\n'):
        logging.info(f'reconfigure: {cmd}')
        if not cmd:
            continue
        if cmd.startswith('WATCH '):
            files.add(cmd.split(maxsplit=1)[-1])
        elif cmd.startswith('ACTIVATE '):
            activations.add(cmd.split(maxsplit=1)[-1])
        else:
            raise Exception(
                'reconfigure output lines must start with "WATCH "'
                f' (actual output: {cmd!r}'
            )

    logging.info('Reload nginx config')
    subprocess.run('nginx -t -c /var/lib/nginx/nginx.conf', shell=True, check=True)
    subprocess.run('nginx -s reload', shell=True, check=True)

    return files, activations

def main():
    logging.getLogger().setLevel(logging.INFO)
    files, activations = reconfigure([])
    try:
        changeStream = changes(files)
        changedFiles = next(changeStream)
        while True:
            files, latestActivations = reconfigure(changedFiles)
            activations = updateActivations(activations, latestActivations)
            changedFiles = changeStream.send(files)
    finally:
        for service in activations:
            os.unlink(activationfile(service))

if __name__ == '__main__':
    main()
